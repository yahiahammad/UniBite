<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Executive Dashboard</title>
    <link rel="stylesheet" href="/Styles/executive.css">
    <link rel="stylesheet" href="/Styles/styles.css">

</head>
<body style="padding-top: 4rem;">
<%- include('partials/Header', { active: 'executive' }) %>

    <div class="container">
        <h1 class="mb-4">Executive Dashboard</h1>

        <!-- User Management Section -->
        <div class="section">
            <h2>User Management</h2>
            <div class="input-group mb-3">
                <input type="text" id="userSearch" class="form-control" placeholder="Search users by name, email, or ID">
                <button class="btn btn-primary" onclick="searchUsers()">Search</button>
            </div>
            <div id="searchResults" class="search-results"></div>
        </div>

        <!-- Vendor Management Section -->
        <div class="section">
            <h2>Vendor Management</h2>
            <div class="input-group mb-3">
                <input type="text" id="vendorSearch" class="form-control" placeholder="Search vendors by name, email, or ID">
                <button class="btn btn-primary" onclick="searchVendors()">Search</button>
            </div>
            <div id="vendorSearchResults" class="search-results"></div>
        </div>

        <!-- Restaurant Management Section -->
        <div class="section">
            <h2>Create New Restaurant</h2>
            <form id="restaurantForm" class="needs-validation" novalidate>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="name" class="form-label">Restaurant Name</label>
                        <input type="text" class="form-control" id="name" required>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" required>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" required>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="phoneNumber" class="form-label">Phone Number</label>
                        <input type="tel" class="form-control" id="phoneNumber" required>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="location" class="form-label">Location</label>
                        <input type="text" class="form-control" id="location" required>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="cuisine" class="form-label">Cuisine</label>
                        <input type="text" class="form-control" id="cuisine" required>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="openingHours" class="form-label">Opening Hours</label>
                        <input type="time" class="form-control" id="openingHours" required>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="closingHours" class="form-label">Closing Hours</label>
                        <input type="time" class="form-control" id="closingHours" required>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary-submit">Create Restaurant</button>
            </form>
        </div>
    </div>


    <script>
        // User search functionality
        async function searchUsers() {
            const query = document.getElementById('userSearch').value;
            try {
                const response = await fetch(`/api/executive/users/search?query=${encodeURIComponent(query)}`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                const users = await response.json();
                displaySearchResults(users, 'searchResults', 'deleteUser');
            } catch (error) {
                console.error('Error searching users:', error);
                alert('Error searching users');
            }
        }

        function displaySearchResults(items, resultsDivId, deleteFunction) {
            const resultsDiv = document.getElementById(resultsDivId);
            resultsDiv.innerHTML = '';

            if (items.length === 0) {
                resultsDiv.innerHTML = '<p>No results found</p>';
                return;
            }

            items.forEach(item => {
                const itemCard = document.createElement('div');
                itemCard.className = 'card user-card';
                let detailsHtml = ``;
                if (resultsDivId === 'searchResults') {
                    detailsHtml = `
                        <p class="card-text">Email: ${item.email}</p>
                        <p class="card-text">User Type: ${item.userType}</p>
                    `;
                } else if (resultsDivId === 'vendorSearchResults') {
                    detailsHtml = `
                        <p class="card-text">Email: ${item.email}</p>
                        <p class="card-text">Location: ${item.location}</p>
                        <p class="card-text">Cuisine: ${item.cuisine}</p>
                    `;
                }

                itemCard.innerHTML = `
                    <div class="card-body">
                        <h5 class="card-title">${item.name}</h5>
                        ${detailsHtml}
                        <button class="btn btn-danger" onclick="${deleteFunction}('${item._id}')">Delete</button>
                    </div>
                `;
                resultsDiv.appendChild(itemCard);
            });
        }

        async function deleteUser(userId) {
            if (!confirm('Are you sure you want to delete this user?')) return;

            try {
                const response = await fetch(`/api/executive/users/${userId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                
                if (response.ok) {
                    alert('User deleted successfully');
                    searchUsers(); // Refresh the search results
                } else {
                    throw new Error('Failed to delete user');
                }
            } catch (error) {
                console.error('Error deleting user:', error);
                alert('Error deleting user');
            }
        }

        // Vendor search functionality
        async function searchVendors() {
            const query = document.getElementById('vendorSearch').value;
            try {
                const response = await fetch(`/api/executive/vendors/search?query=${encodeURIComponent(query)}`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                const vendors = await response.json();
                displaySearchResults(vendors, 'vendorSearchResults', 'deleteVendor');
            } catch (error) {
                console.error('Error searching vendors:', error);
                alert('Error searching vendors');
            }
        }

        async function deleteVendor(vendorId) {
            if (!confirm('Are you sure you want to delete this vendor?')) return;

            try {
                const response = await fetch(`/api/executive/vendors/${vendorId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                
                if (response.ok) {
                    alert('Vendor deleted successfully');
                    searchVendors(); // Refresh the search results
                } else {
                    throw new Error('Failed to delete vendor');
                }
            } catch (error) {
                console.error('Error deleting vendor:', error);
                alert('Error deleting vendor');
            }
        }

        // Restaurant creation functionality
        document.getElementById('restaurantForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = {
                name: document.getElementById('name').value,
                email: document.getElementById('email').value,
                password: document.getElementById('password').value,
                phoneNumber: document.getElementById('phoneNumber').value,
                location: document.getElementById('location').value,
                cuisine: document.getElementById('cuisine').value,
                openingHours: document.getElementById('openingHours').value,
                closingHours: document.getElementById('closingHours').value
            };

            try {
                const response = await fetch('/api/executive/restaurants', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    alert('Restaurant created successfully');
                    e.target.reset();
                } else {
                    throw new Error('Failed to create restaurant');
                }
            } catch (error) {
                console.error('Error creating restaurant:', error);
                alert('Error creating restaurant');
            }
        });
    </script>
</body>
</html> 