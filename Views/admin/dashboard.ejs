<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= vendor.name %> - Admin Dashboard</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/Styles/admin.css">
    <style>
        /* Notification Toast Styles */
        .notification-container {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1055; /* Higher than most Bootstrap components */
        }

        .toast-notification {
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: .375rem;
            box-shadow: 0 0.5rem 1rem rgba(0,0,0,.15);
            margin-bottom: 1rem;
            width: 350px;
            max-width: 100%;
            opacity: 0;
            transition: opacity 0.3s, transform 0.3s;
            transform: translateX(-100%);
        }

        .toast-notification.show {
            opacity: 1;
            transform: translateX(0);
        }
        
        .toast-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: .75rem 1.25rem;
            background-color: rgba(0,0,0,.03);
            border-bottom: 1px solid rgba(0,0,0,.125);
        }

        .toast-body {
            padding: 1rem;
        }

        /* Flashing Order Style */
        @keyframes flash-red-background {
            0%, 100% {
                background-color: #fff;
            }
            50% {
                background-color: #ffe6e6; /* A light red for flashing */
            }
        }

        /* The :has selector is supported in modern browsers */
        .order-card:has(.status-pending) {
            animation: flash-red-background 1.5s infinite;
            border-color: #ff4d4d;
        }
    </style>
</head>
<body>
    <audio id="notificationSound" src="/Audio/OrderNotification.mp3" preload="auto"></audio>

    <div id="notificationContainer" class="notification-container"></div>

    <div class="admin-container">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <h2><%= vendor.name %></h2>
                <div class="status-indicator status-<%= vendor.status %>" id="statusIndicator">
                    <%= vendor.status.charAt(0).toUpperCase() + vendor.status.slice(1) %>
                </div>
            </div>
            <div class="status-controls">
                <button class="btn" data-status="open">
                    <i class="fas fa-door-open"></i>
                    Open
                </button>
                <button class="btn" data-status="busy">
                    <i class="fas fa-clock"></i>
                    Busy
                </button>
                <button class="btn" data-status="closed">
                    <i class="fas fa-door-closed"></i>
                    Closed
                </button>
            </div>
            <nav class="sidebar-nav">
                <button class="nav-item active" data-section="dashboard">
                    <i class="fas fa-chart-line"></i>
                    Dashboard
                </button>
                <button class="nav-item" data-section="orders">
                    <i class="fas fa-shopping-cart"></i>
                    Orders
                </button>
                <button class="nav-item" data-section="menu">
                    <i class="fas fa-utensils"></i>
                    Menu
                </button>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Dashboard Section -->
            <section id="dashboard" class="section active">
                <div class="stats-grid">
                    <div class="stat-card">
                        <h3>Total Orders</h3>
                        <p class="stat-value"><%= stats.totalOrders %></p>
                    </div>
                    <div class="stat-card">
                        <h3>Today's Orders</h3>
                        <p class="stat-value"><%= stats.todayOrders %></p>
                    </div>
                    <div class="stat-card">
                        <h3>Total Revenue</h3>
                        <p class="stat-value"><%= stats.totalRevenue.toFixed(2) %> EGP</p>
                    </div>
                    <div class="stat-card">
                        <h3>Today's Revenue</h3>
                        <p class="stat-value"><%= stats.todayRevenue.toFixed(2) %> EGP</p>
                    </div>
                    <div class="stat-card">
                        <h3>Average Pickup Time</h3>
                        <p class="stat-value"><%= vendor.averagePickupTime %> mins</p>
                    </div>
                </div>

                <div class="recent-orders">
                    <h2>Recent Orders</h2>
                    <div class="orders-grid" id="recentOrdersGrid">
                        <!-- Orders are loaded here via JavaScript -->
                    </div>
                </div>
            </section>

            <!-- Orders Section -->
            <section id="orders" class="section">
                <h2>All Orders</h2>
                <div class="orders-grid" id="allOrdersGrid">
                    <!-- All orders will be loaded here via AJAX -->
                </div>
                <div class="pagination-controls mt-4">
                    <nav aria-label="Orders pagination">
                        <ul class="pagination justify-content-center" id="ordersPagination">
                            <!-- Pagination will be dynamically inserted here -->
                        </ul>
                    </nav>
                </div>
            </section>

            <!-- Menu Section -->
            <section id="menu" class="section">
                <div class="menu-management">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2>Menu Management</h2>
                        <button class="btn btn-primary" onclick="openAddItemModal()">
                            <i class="fas fa-plus"></i> Add New Item
                        </button>
                    </div>

                    <!-- Menu Items Table -->
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Image</th>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Price</th>
                                    <th>Category</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="menuItemsTable">
                                <!-- Menu items will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>

            <!-- Add/Edit Item Modal -->
            <div class="modal fade" id="menuItemModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="modalTitle">Add New Menu Item</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <form id="menuItemForm" enctype="multipart/form-data">
                                <input type="hidden" id="itemId">
                                <div class="mb-3">
                                    <label class="form-label">Name</label>
                                    <input type="text" class="form-control" id="name" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" id="description" rows="3"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Price</label>
                                    <input type="number" class="form-control" id="price" step="0.01" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Category</label>
                                    <input type="text" class="form-control" id="category">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Image</label>
                                    <input type="file" class="form-control" id="image" accept="image/*">
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="available" checked>
                                        <label class="form-check-label">Available</label>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="saveMenuItem()">Save</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Delete Confirmation Modal -->
            <div class="modal fade" id="deleteConfirmModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirm Delete</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete this menu item? This action cannot be undone.</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-danger" onclick="confirmDelete()">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Status Confirmation Modal -->
    <div id="statusConfirmModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Confirm Status Change</h3>
                <button class="close">&times;</button>
            </div>
            <div class="modal-body">
                <p id="statusConfirmMessage"></p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" id="cancelStatusChange">Cancel</button>
                <button class="btn btn-primary" id="confirmStatusChange">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Socket.IO Client -->
    <script src="/socket.io/socket.io.js"></script>

    <!-- Custom JavaScript -->
    <script src="/JavaScript/admin.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const socket = io();
            const ITEMS_PER_PAGE = 15;
            let currentPage = 1;
            let totalPages = 1;

            const notificationContainer = document.getElementById('notificationContainer');
            const recentOrdersGrid = document.getElementById('recentOrdersGrid');
            const allOrdersGrid = document.getElementById('allOrdersGrid');
            const ordersPagination = document.getElementById('ordersPagination');
            const notificationSound = document.getElementById('notificationSound');
            let isAudioUnlocked = false;

            // Function to unlock audio on the first user interaction.
            function unlockAudio() {
                if (!isAudioUnlocked) {
                    notificationSound.play().then(() => {
                        notificationSound.pause();
                        notificationSound.currentTime = 0;
                        isAudioUnlocked = true;
                        console.log("Audio unlocked by user interaction.");
                        // Once unlocked, we don't need these listeners anymore.
                        document.removeEventListener('click', unlockAudio);
                        document.removeEventListener('keydown', unlockAudio);
                    }).catch(error => {
                         console.warn("Could not unlock audio on interaction. Browser may require a more direct click.", error);
                    });
                }
            }

            // Listen for the first click or keypress anywhere on the page to unlock audio.
            document.addEventListener('click', unlockAudio);
            document.addEventListener('keydown', unlockAudio);

            // Function to refresh the page to update EJS
            function refreshPage() {
                window.location.reload();
            }

            // Function to load orders with pagination
            async function loadOrders(page = 1) {
                try {
                    const response = await fetch(`/api/admin/orders?page=${page}&limit=${ITEMS_PER_PAGE}`);
                    if (!response.ok) {
                        throw new Error('Failed to fetch orders');
                    }
                    const data = await response.json();
                    
                    allOrdersGrid.innerHTML = ''; // Clear existing content
                    
                    if (data.orders && data.orders.length > 0) {
                        data.orders.forEach(order => {
                            // Canceled orders are now filtered on the backend, but this is a good safeguard.
                            if (order.status !== 'cancelled') {
                                const orderCard = createOrderCard(order);
                                allOrdersGrid.appendChild(orderCard);
                            }
                        });
                    } else {
                        allOrdersGrid.innerHTML = '<p>No orders found.</p>';
                    }
                    
                    // Update pagination regardless of whether there are orders
                    totalPages = data.total ? Math.ceil(data.total / ITEMS_PER_PAGE) : 0;
                    updatePagination(page);

                } catch (error) {
                    console.error('Error loading orders:', error);
                    allOrdersGrid.innerHTML = '<p>Could not load orders.</p>';
                }
            }

            // Function to update pagination controls
            function updatePagination(currentPage) {
                ordersPagination.innerHTML = '';
                
                // Hide pagination if not needed
                if (totalPages <= 1) {
                    return;
                }

                // Previous button
                const prevLi = document.createElement('li');
                prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                prevLi.innerHTML = `
                    <a class="page-link" href="#" aria-label="Previous" data-page="${currentPage - 1}">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                `;
                ordersPagination.appendChild(prevLi);

                // Page numbers
                for (let i = 1; i <= totalPages; i++) {
                    const li = document.createElement('li');
                    li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    li.innerHTML = `
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    `;
                    ordersPagination.appendChild(li);
                }

                // Next button
                const nextLi = document.createElement('li');
                nextLi.className = `page-item ${currentPage >= totalPages ? 'disabled' : ''}`;
                nextLi.innerHTML = `
                    <a class="page-link" href="#" aria-label="Next" data-page="${currentPage + 1}">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                `;
                ordersPagination.appendChild(nextLi);
            }
            
            // Use event delegation for pagination clicks
            ordersPagination.addEventListener('click', (e) => {
                e.preventDefault();
                const link = e.target.closest('.page-link');
                if (link && !link.closest('.page-item').classList.contains('disabled')) {
                    const page = parseInt(link.dataset.page);
                    if (page) {
                        currentPage = page;
                        loadOrders(page);
                    }
                }
            });

            // Listen for new orders
            socket.on('new_order', (order) => {
                if (isAudioUnlocked) {
                    notificationSound.play().catch(e => console.error("Error playing sound.", e));
                }
                showToastNotification(order);

                // If on the dashboard, prepend the new order to the *recent* orders list.
                // If on the main paginated orders view, the toast is sufficient notification,
                // and we avoid a jarring auto-refresh. The view will update on next navigation.
                if (document.getElementById('dashboard').classList.contains('active')) {
                    recentOrdersGrid.prepend(createOrderCard(order));
                }
            });

            // Listen for status updates
            socket.on('order_status_updated', (order) => {
                // An order card might exist in both grids, so we must update all instances.
                const orderCards = document.querySelectorAll(`#order-${order._id}`);
                
                if (orderCards.length === 0 && order.status !== 'cancelled' && document.getElementById('orders').classList.contains('active')) {
                    // This can happen if an order from another page is accepted via toast.
                    // The best way to handle this is to just reload the current page view.
                    loadOrders(currentPage);
                    return;
                }

                orderCards.forEach(orderCard => {
                    if (order.status === 'cancelled') {
                        orderCard.style.transition = 'opacity 0.5s';
                        orderCard.style.opacity = '0';
                        setTimeout(() => orderCard.remove(), 500);
                    } else {
                        const updatedCard = createOrderCard(order);
                        orderCard.innerHTML = updatedCard.innerHTML;
                        orderCard.className = updatedCard.className;
                    }
                });
            });

            function showToastNotification(order) {
                const toast = document.createElement('div');
                toast.className = 'toast-notification';
                toast.id = `toast-${order._id}`;

                const itemsHtml = order.items.map(item => 
                    `<li>${item.quantity} x ${item.nameAtOrder || 'N/A'}</li>`
                ).join('');

                toast.innerHTML = `
                    <div class="toast-header">
                        <strong>New Order Received!</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        <p>Order #${order._id.substring(0, 8)}...</p>
                        <ul>${itemsHtml}</ul>
                        <button class="btn btn-sm btn-success accept-toast-btn" data-order-id="${order._id}">Accept</button>
                        <button class="btn btn-sm btn-danger cancel-toast-btn" data-order-id="${order._id}">Cancel</button>
                    </div>
                `;

                notificationContainer.appendChild(toast);

                // Show the toast
                setTimeout(() => {
                    toast.classList.add('show');
                }, 100); // Small delay to allow CSS transition

                // Hide the toast after 10 seconds
                const hideTimeout = setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300); // Remove from DOM after transition
                }, 10000);

                // Add event listeners to close button and accept button
                toast.querySelector('.btn-close').addEventListener('click', () => {
                    clearTimeout(hideTimeout);
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                });
            }

            // Function to create an order card element (for the main grid)
            function createOrderCard(order) {
                const card = document.createElement('div');
                card.className = 'order-card';
                card.id = `order-${order._id}`;
                card.dataset.orderId = order._id;

                const itemsHtml = order.items.map(item => 
                    `<li>${item.quantity} x ${item.nameAtOrder || 'N/A'}</li>`
                ).join('');

                card.innerHTML = `
                    <div class="order-header">
                        <h5>Order #${order._id.substring(0, 8)}...</h5>
                        <span class="order-status status-${order.status}">${order.status}</span>
                    </div>
                    <div class="order-body">
                        <ul>${itemsHtml}</ul>
                        <p><strong>Total:</strong> ${order.totalPrice.toFixed(2)} EGP</p>
                    </div>
                    <div class="order-footer">
                        ${order.status === 'pending' ? 
                            `<button class="btn btn-sm btn-success accept-order-btn" data-order-id="${order._id}">Accept</button>` : 
                            ''}
                        ${(order.status === 'pending' || order.status === 'preparing') ?
                            `<button class="btn btn-sm btn-danger cancel-order-btn" data-order-id="${order._id}">Cancel</button>` :
                            ''}
                    </div>
                `;
                return card;
            }

            function handleAccept(orderId) {
                 // The order ID is saved in a variable (not visible)
                const hiddenOrderId = orderId; 
                console.log(`Accepting order with hidden ID: ${hiddenOrderId}`);
                socket.emit('accept_order', { orderId: hiddenOrderId });
            }

            function handleCancel(orderId) {
                console.log(`Cancelling order with ID: ${orderId}`);
                socket.emit('cancel_order', { orderId: orderId });
            }

            // Consolidated event listener for all order actions using delegation
            document.querySelector('.main-content').addEventListener('click', (e) => {
                const target = e.target;
                const orderId = target.dataset.orderId;

                if (!orderId) return;

                if (target.classList.contains('accept-order-btn')) {
                    handleAccept(orderId);
                } else if (target.classList.contains('cancel-order-btn')) {
                    handleCancel(orderId);
                }
            });

            // Event listener for toast notifications
            notificationContainer.addEventListener('click', (e) => {
                const target = e.target;
                const orderId = target.dataset.orderId;
                const toast = document.getElementById(`toast-${orderId}`);

                if (!orderId) return;

                if (target.classList.contains('accept-toast-btn')) {
                    handleAccept(orderId);
                } else if (target.classList.contains('cancel-toast-btn')) {
                    handleCancel(orderId);
                }
                
                if (toast) {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                }
            });

            // Initial Load Logic
            (async () => {
                // Load recent orders for the dashboard view initially
                try {
                    const response = await fetch('/api/admin/recent-orders?limit=15');
                    if (!response.ok) throw new Error('Failed to fetch recent orders');
                    
                    const orders = await response.json();
                    recentOrdersGrid.innerHTML = '';
                    if (orders && orders.length > 0) {
                        orders.forEach(order => {
                            if (order.status !== 'cancelled') {
                                recentOrdersGrid.appendChild(createOrderCard(order));
                            }
                        });
                    } else {
                        recentOrdersGrid.innerHTML = '<p>No recent orders found.</p>';
                    }
                } catch (error) {
                    console.error('Error loading initial orders:', error);
                    recentOrdersGrid.innerHTML = '<p>Could not load recent orders.</p>';
                }

                // Setup listener for the 'Orders' tab to load paginated orders
                document.querySelector('[data-section="orders"]').addEventListener('click', () => {
                    // Only load if the section is not already active to prevent redundant loads
                    if (!document.getElementById('orders').classList.contains('active')) {
                        loadOrders(currentPage);
                    }
                });
            })();
        });
    </script>
</body>
</html>